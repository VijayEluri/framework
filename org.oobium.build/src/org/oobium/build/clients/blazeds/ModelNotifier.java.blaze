package org.oobium.persist.blaze;

import static org.oobium.app.http.Action.*;
import static org.oobium.utils.StringUtils.join;

import java.util.Set;

import org.oobium.app.http.Action;
import org.oobium.persist.Model;
import org.oobium.persist.Observer;

import flex.messaging.MessageBroker;
import flex.messaging.messages.AsyncMessage;

public abstract class ModelNotifier<T extends Model> extends Observer<T> {

	@Override
	protected void afterCreate(T model) {
		sendNotification(model.getId(), null, create);
	}

	@Override
	protected void afterUpdate(T model) {
		sendNotification(model.getId(), model.getAll().keySet(), update);
	}

	@Override
	protected void afterDestroy(int id) {
		sendNotification(id, null, destroy);
	}

	private final String channelName;
	
	public ModelNotifier(String channelName) {
		this.channelName = channelName;
	}

	private void sendNotification(int id, Set<String> fields, Action action) {
		String data = modelClass.getName() + ":" + id;
		switch(action) {
		case create:
			send("CREATED " + data);
			break;
		case update:
			send("UPDATED " + data + "-" + join(fields, ','));
			break;
		case destroy:
			send("DESTROYED " + data);
			break;
		default:
			logger.warn("invalid action: " + action + "; only create, update, and destroy are allowed");
			return; // stop notifications for this action
		}
	}

	private void send(String body) {
		AsyncMessage msg = new AsyncMessage();
		msg.setClientId("Java-Based-Producer-For-Messaging");
		msg.setTimestamp(System.currentTimeMillis());
		msg.setMessageId("Java-Based-Producer-For-Messaging-ID");
		msg.setDestination(channelName);
		msg.setBody(body);
		msg.setHeader("sender", "From the server");

		MessageBroker.getMessageBroker(null).routeMessageToService(msg, null);	
	}
	
}
