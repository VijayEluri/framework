package org.oobium.persist.blaze;

import static org.oobium.utils.StringUtils.join;

import org.oobium.persist.Model;
import org.oobium.persist.Observer;

import flex.messaging.MessageBroker;
import flex.messaging.messages.AsyncMessage;

public abstract class ModelNotifier<T extends Model> extends Observer<T> {

	private final String channelName;
	
	public ModelNotifier(String channelName) {
		this.channelName = channelName;
	}

	@Override
	protected void afterCreate(T model) {
		AsyncMessage msg = createMessage("afterCreate", model.getId());
		sendMessage(msg);
	}
	
	@Override
	protected void afterUpdate(T model) {
		AsyncMessage msg = createMessage("afterUpdate", model.getId());
		msg.setHeader("fields", join(model.getAll().keySet(), ','));
		sendMessage(msg);
	}
	
	@Override
	protected void afterDestroy(Object id) {
		AsyncMessage msg = createMessage("afterDestroy", id);
		sendMessage(msg);
	}
	
	private AsyncMessage createMessage(String method, Object id) {
		AsyncMessage msg = new AsyncMessage();
		msg.setClientId("Java-Based-Producer-For-Messaging");
		msg.setTimestamp(System.currentTimeMillis());
		msg.setMessageId("Java-Based-Producer-For-Messaging-ID");
		msg.setDestination(channelName);
		msg.setHeader("class", modelClass.getCanonicalName());
		msg.setHeader("method", method);
		msg.setHeader("id", id);
		return msg;
	}
	
	private void sendMessage(AsyncMessage msg) {
		MessageBroker.getMessageBroker(null).routeMessageToService(msg, null);	
	}
	
}
