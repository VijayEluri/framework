/*******************************************************************************
 * Copyright (c) 2010 Oobium, Inc.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Jeremy Dowdall <jeremy@oobium.com> - initial API and implementation
 ******************************************************************************/
package org.oobium.build.model.system;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.oobium.app.sessions.ISession;
import org.oobium.persist.Attribute;
import org.oobium.persist.ModelDescription;
import org.oobium.persist.NullPersistService;
import org.oobium.persist.PersistService;
import org.oobium.persist.Validate;
import org.oobium.persist.Validations;
import org.oobium.utils.json.JsonUtils;

@ModelDescription(
	attrs = {
		@Attribute(name="uuid", type=String.class, readOnly=true),
		@Attribute(name="data", type=Map.class),
		@Attribute(name="expiration", type=Date.class)
	}
)
@Validations(
	@Validate(field="expiration", isNotNull=true)
)
public class Session extends SessionModel implements ISession {

	private Map<String, String> cookieData;

	@Override
	protected void afterCreate() {
		putCookieData(SESSION_ID_KEY, getId().toString());
		putCookieData(SESSION_UUID_KEY, getUuid());
	}
	
	@Override
	protected void beforeCreate() {
		if(!hasUuid()) {
			put(UUID, java.util.UUID.randomUUID().toString());
		}
	}
	
	@Override
	public void clearCookieData() {
    	if(cookieData != null) {
    		cookieData.clear();
    	}
	}
	
	@Override
	public void clearData() {
    	Map<String, Object> data = getData();
    	if(data != null) {
    		data.clear();
    	}
	}

	@Override
	public String getCookieData() {
		if(cookieData != null) {
			return JsonUtils.toJson(cookieData);
			}
		return "";
	}

	@Override
	public String getCookieData(String key) {
		if(cookieData != null) {
			return cookieData.get(key);
		}
		return null;
	}

	@Override
	public Object getData(String key) {
    	Map<String, Object> data = getData();
    	if(data != null) {
    		return data.get(key);
    	}
    	return null;
	}

	@Override
	public boolean isCookieOnly() {
		PersistService service = getPersistor();
		return (service == null || service instanceof NullPersistService);
	}

	@Override
	public boolean isDestroyed() {
		Date expiration = (Date) get("expiration");
		return expiration == null || expiration.before(new Date());
	}
	
	@Override
	public ISession putCookieData(Map<String, String> data) {
		if(cookieData == null) {
			cookieData = new HashMap<String, String>(data);
		} else {
			cookieData.putAll(data);
		}
		return this;
	}
	
	@Override
	public ISession putCookieData(String key, String value) {
		if(cookieData == null) {
			cookieData = new HashMap<String, String>();
		}
		cookieData.put(key, value);
		return this;
	}
	
	@Override
	public ISession putData(Map<String, Object> data) {
    	Map<String, Object> orig = getData();
    	if(orig == null) {
    		orig = new HashMap<String, Object>();
    		put("data", orig);
    	}
		orig.putAll(data);
		return this;
	}

	@Override
	public Session putData(String key, Object value) {
    	Map<String, Object> data = getData();
    	if(data == null) {
    		data = new HashMap<String, Object>();
    		put("data", data);
    	}
		data.put(key, value);
		return this;
	}
	
	@Override
	public Object removeData(String key) {
    	Map<String, Object> data = getData();
    	if(data != null) {
    		return data.remove(key);
    	}
    	return null;
	}

	@Override
	public Session setExpiration(int secondsFromNow) {
		return setExpiration(new Date(System.currentTimeMillis() + secondsFromNow*1000));
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("{id=").append(getId()).append(", expires=").append(getExpiration()).append(", data=").append(getData()).append('}');
		return sb.toString();
	}
	
}
