/*******************************************************************************
 * Copyright (c) 2010 Oobium, Inc.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Jeremy Dowdall <jeremy@oobium.com> - initial API and implementation
 ******************************************************************************/
package org.oobium.build.model.system;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.oobium.app.sessions.ISession;
import org.oobium.persist.Attribute;
import org.oobium.persist.ModelDescription;
import org.oobium.persist.Validate;
import org.oobium.persist.Validations;

@ModelDescription(
	attrs = {
		@Attribute(name="uuid", type=String.class, readOnly=true),
		@Attribute(name="data", type=Map.class),
		@Attribute(name="expiration", type=Date.class)
	}
)
@Validations(
	@Validate(field="expiration", isNotNull=true)
)
public class Session extends SessionModel implements ISession {

	@Override
	protected void beforeCreate() {
		if(!hasUuid()) {
			put(UUID, java.util.UUID.randomUUID().toString());
		}
	}
	
	@Override
	public void clearData() {
    	Map<String, String> data = getData();
    	if(data != null) {
    		data.clear();
    	}
	}

	@Override
	public String getData(String key) {
    	Map<String, String> data = getData();
    	if(data != null) {
    		return data.get(key);
    	}
    	return null;
	}

	@Override
	public boolean isDestroyed() {
		Date expiration = (Date) get("expiration");
		return expiration == null || expiration.before(new Date());
	}
	
	@Override
	public Session putData(String key, Object value) {
		return putData(key, String.valueOf(value));
	}
	
	@Override
	public Session putData(String key, String value) {
    	Map<String, String> data = getData();
    	if(data == null) {
    		data = new HashMap<String, String>();
    		put("data", data);
    	}
		data.put(key, value);
		return this;
	}
	
	@Override
	public String removeData(String key) {
    	Map<String, String> data = getData();
    	if(data != null) {
    		return data.remove(key);
    	}
    	return null;
	}

	@Override
	public Session setExpiration(int secondsFromNow) {
		return setExpiration(new Date(System.currentTimeMillis() + secondsFromNow*1000));
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("{id=").append(getId()).append(", expires=").append(getExpiration()).append(", data=").append(getData()).append('}');
		return sb.toString();
	}
	
}
