package org.oobium.persist.db.internal;

import static org.oobium.utils.StringUtils.asString;
import static org.oobium.utils.StringUtils.join;
import static org.oobium.utils.StringUtils.pad;
import static org.oobium.utils.StringUtils.repeat;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.List;

import org.oobium.utils.SqlUtils;

public class LoggingStatement implements Statement {

	final LoggingConnection connection;
	private final Statement statement;
	
	public LoggingStatement(LoggingConnection connection, Statement statement) {
		this.connection = connection;
		this.statement = statement;
	}
	
	@Override
	public void addBatch(String sql) throws SQLException {
		connection.writeln("-addBatch: " + sql);
		statement.addBatch(sql);
	}

	@Override
	public void cancel() throws SQLException {
		connection.writeln("-cancel");
		statement.cancel();
	}

	@Override
	public void clearBatch() throws SQLException {
		connection.writeln("-clearBatch");
		statement.clearBatch();
	}

	@Override
	public void clearWarnings() throws SQLException {
		connection.writeln("-clearWarnings");
		statement.clearWarnings();
	}

	@Override
	public void close() throws SQLException {
		connection.writeln("-close");
		statement.close();
	}

	@Override
	public boolean execute(String sql) throws SQLException {
		connection.writeln(sql);
		boolean result = statement.execute(sql);
		connection.writeln("  " + result);
		return result;
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		connection.writeln(sql + " [autoGeneratedKeys: " + autoGeneratedKeys + "]");
		boolean result = statement.execute(sql, autoGeneratedKeys);
		connection.writeln("  " + result);
		return result;
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		connection.writeln(sql + " [columnIndexes: " + join(columnIndexes, ',') + "]");
		boolean result = statement.execute(sql, columnIndexes);
		connection.writeln("  " + result);
		return result;
	}

	@Override
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		connection.writeln(sql + " [columnNames: " + join(columnNames, ',') + "]");
		boolean result = statement.execute(sql, columnNames);
		connection.writeln("  " + result);
		return result;
	}

	@Override
	public int[] executeBatch() throws SQLException {
		connection.writeln("-executeBatch");
		int[] result = statement.executeBatch();
		connection.writeln("  " + asString(result));
		return result;
	}

	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		connection.writeln(sql);
		ResultSet result = statement.executeQuery(sql);
		write(result);
		return result;
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		connection.writeln(sql);
		int result = statement.executeUpdate(sql);
		connection.writeln("  " + result);
		return result;
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		connection.writeln(sql + " [autoGeneratedKeys: " + autoGeneratedKeys + "]");
		int result = statement.executeUpdate(sql, autoGeneratedKeys);
		connection.writeln("  " + result);
		return result;
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		connection.writeln(sql + " [columnIndexes: " + join(columnIndexes, ',') + "]");
		int result = statement.executeUpdate(sql, columnIndexes);
		connection.writeln("  " + result);
		return result;
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		connection.writeln(sql + " [columnNames: " + join(columnNames, ',') + "]");
		int result = statement.executeUpdate(sql, columnNames);
		connection.writeln("  " + result);
		return result;
	}

	@Override
	public Connection getConnection() throws SQLException {
		return statement.getConnection();
	}

	@Override
	public int getFetchDirection() throws SQLException {
		return statement.getFetchDirection();
	}

	@Override
	public int getFetchSize() throws SQLException {
		return statement.getFetchSize();
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		return statement.getGeneratedKeys();
	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		return statement.getMaxFieldSize();
	}

	@Override
	public int getMaxRows() throws SQLException {
		return statement.getMaxRows();
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		return statement.getMoreResults();
	}

	@Override
	public boolean getMoreResults(int current) throws SQLException {
		return statement.getMoreResults(current);
	}

	@Override
	public int getQueryTimeout() throws SQLException {
		return statement.getQueryTimeout();
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		return statement.getResultSet();
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		return statement.getResultSetConcurrency();
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		return statement.getResultSetHoldability();
	}

	@Override
	public int getResultSetType() throws SQLException {
		return statement.getResultSetType();
	}

	@Override
	public int getUpdateCount() throws SQLException {
		return statement.getUpdateCount();
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		return statement.getWarnings();
	}

	@Override
	public boolean isClosed() throws SQLException {
		return statement.isClosed();
	}

	@Override
	public boolean isPoolable() throws SQLException {
		return statement.isPoolable();
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return statement.isWrapperFor(iface);
	}

	@Override
	public void setCursorName(String name) throws SQLException {
		connection.writeln("-setCursorName(" + name + ")");
		statement.setCursorName(name);
	}

	@Override
	public void setEscapeProcessing(boolean enable) throws SQLException {
		connection.writeln("-setEscapeProcessing(" + enable + ")");
		statement.setEscapeProcessing(enable);
	}

	@Override
	public void setFetchDirection(int direction) throws SQLException {
		connection.writeln("-setFetchDirection(" + direction + ")");
		statement.setFetchDirection(direction);
	}

	@Override
	public void setFetchSize(int rows) throws SQLException {
		connection.writeln("-setFetchSize(" + rows + ")");
		statement.setFetchSize(rows);
	}

	@Override
	public void setMaxFieldSize(int max) throws SQLException {
		connection.writeln("-setMaxFieldSize(" + max + ")");
		statement.setMaxFieldSize(max);
	}

	@Override
	public void setMaxRows(int max) throws SQLException {
		connection.writeln("-setMaxRows(" + max + ")");
		statement.setMaxRows(max);
	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {
		connection.writeln("-setPoolable(" + poolable + ")");
		statement.setPoolable(poolable);
	}

	@Override
	public void setQueryTimeout(int seconds) throws SQLException {
		connection.writeln("-setQueryTimeout(" + seconds + ")");
		statement.setQueryTimeout(seconds);
	}

	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		return statement.unwrap(iface);
	}

	void write(ResultSet rs) throws SQLException {
		if(rs.getType() == ResultSet.TYPE_FORWARD_ONLY) {
			connection.writeln("  success");
			return;
		}
		List<List<Object>> lists = SqlUtils.asLists(rs, true);
		if(lists.size() == 1) {
			// just the header, no actual results
			connection.writeln("  empty ResultSet");
		} else {
			int[] widths = new int[lists.get(0).size()];
			for(List<Object> list : lists) {
				for(int i = 0; i < list.size(); i++) {
					widths[i] = Math.max(widths[i], String.valueOf(list.get(i)).length());
				}
			}
			int totalWidth = 0;
			for(int width : widths) {
				totalWidth += (width + 2);
			}
			for(int i = 0; i < lists.size(); i++) {
				if(i == 1) {
					connection.write("  ");
					connection.writeln(repeat('-', totalWidth));
				}
				List<Object> list = lists.get(i);
				for(int j = 0; j < list.size(); j++) {
					if(j == 0) connection.write("  |");
					connection.write(pad(String.valueOf(list.get(i)), widths[j]));
					connection.write("|");
				}
				connection.writeln();
			}
		}
	}
	
}
